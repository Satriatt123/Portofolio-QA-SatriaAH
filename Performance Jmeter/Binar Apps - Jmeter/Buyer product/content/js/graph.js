/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 6740.0, "series": [{"data": [[0.0, 169.0], [0.1, 169.0], [0.2, 169.0], [0.3, 169.0], [0.4, 169.0], [0.5, 177.0], [0.6, 177.0], [0.7, 177.0], [0.8, 177.0], [0.9, 177.0], [1.0, 207.0], [1.1, 207.0], [1.2, 207.0], [1.3, 207.0], [1.4, 207.0], [1.5, 228.0], [1.6, 228.0], [1.7, 228.0], [1.8, 228.0], [1.9, 228.0], [2.0, 236.0], [2.1, 236.0], [2.2, 236.0], [2.3, 236.0], [2.4, 236.0], [2.5, 271.0], [2.6, 271.0], [2.7, 271.0], [2.8, 271.0], [2.9, 271.0], [3.0, 276.0], [3.1, 276.0], [3.2, 276.0], [3.3, 276.0], [3.4, 276.0], [3.5, 361.0], [3.6, 361.0], [3.7, 361.0], [3.8, 361.0], [3.9, 361.0], [4.0, 405.0], [4.1, 405.0], [4.2, 405.0], [4.3, 405.0], [4.4, 405.0], [4.5, 421.0], [4.6, 421.0], [4.7, 421.0], [4.8, 421.0], [4.9, 421.0], [5.0, 455.0], [5.1, 455.0], [5.2, 455.0], [5.3, 455.0], [5.4, 455.0], [5.5, 456.0], [5.6, 456.0], [5.7, 456.0], [5.8, 456.0], [5.9, 456.0], [6.0, 470.0], [6.1, 470.0], [6.2, 470.0], [6.3, 470.0], [6.4, 470.0], [6.5, 489.0], [6.6, 489.0], [6.7, 489.0], [6.8, 489.0], [6.9, 489.0], [7.0, 489.0], [7.1, 489.0], [7.2, 489.0], [7.3, 489.0], [7.4, 489.0], [7.5, 506.0], [7.6, 506.0], [7.7, 506.0], [7.8, 506.0], [7.9, 506.0], [8.0, 510.0], [8.1, 510.0], [8.2, 510.0], [8.3, 510.0], [8.4, 510.0], [8.5, 519.0], [8.6, 519.0], [8.7, 519.0], [8.8, 519.0], [8.9, 519.0], [9.0, 522.0], [9.1, 522.0], [9.2, 522.0], [9.3, 522.0], [9.4, 522.0], [9.5, 528.0], [9.6, 528.0], [9.7, 528.0], [9.8, 528.0], [9.9, 528.0], [10.0, 530.0], [10.1, 530.0], [10.2, 530.0], [10.3, 530.0], [10.4, 530.0], [10.5, 540.0], [10.6, 540.0], [10.7, 540.0], [10.8, 540.0], [10.9, 540.0], [11.0, 545.0], [11.1, 545.0], [11.2, 545.0], [11.3, 545.0], [11.4, 545.0], [11.5, 547.0], [11.6, 547.0], [11.7, 547.0], [11.8, 547.0], [11.9, 547.0], [12.0, 550.0], [12.1, 550.0], [12.2, 550.0], [12.3, 550.0], [12.4, 550.0], [12.5, 552.0], [12.6, 552.0], [12.7, 552.0], [12.8, 552.0], [12.9, 552.0], [13.0, 559.0], [13.1, 559.0], [13.2, 559.0], [13.3, 559.0], [13.4, 559.0], [13.5, 565.0], [13.6, 565.0], [13.7, 565.0], [13.8, 565.0], [13.9, 565.0], [14.0, 570.0], [14.1, 570.0], [14.2, 570.0], [14.3, 570.0], [14.4, 570.0], [14.5, 580.0], [14.6, 580.0], [14.7, 580.0], [14.8, 580.0], [14.9, 580.0], [15.0, 600.0], [15.1, 600.0], [15.2, 600.0], [15.3, 600.0], [15.4, 600.0], [15.5, 601.0], [15.6, 601.0], [15.7, 601.0], [15.8, 601.0], [15.9, 601.0], [16.0, 609.0], [16.1, 609.0], [16.2, 609.0], [16.3, 609.0], [16.4, 609.0], [16.5, 609.0], [16.6, 609.0], [16.7, 609.0], [16.8, 609.0], [16.9, 609.0], [17.0, 610.0], [17.1, 610.0], [17.2, 610.0], [17.3, 610.0], [17.4, 610.0], [17.5, 610.0], [17.6, 610.0], [17.7, 610.0], [17.8, 610.0], [17.9, 610.0], [18.0, 630.0], [18.1, 630.0], [18.2, 630.0], [18.3, 630.0], [18.4, 630.0], [18.5, 631.0], [18.6, 631.0], [18.7, 631.0], [18.8, 631.0], [18.9, 631.0], [19.0, 653.0], [19.1, 653.0], [19.2, 653.0], [19.3, 653.0], [19.4, 653.0], [19.5, 653.0], [19.6, 653.0], [19.7, 653.0], [19.8, 653.0], [19.9, 653.0], [20.0, 657.0], [20.1, 657.0], [20.2, 657.0], [20.3, 657.0], [20.4, 657.0], [20.5, 659.0], [20.6, 659.0], [20.7, 659.0], [20.8, 659.0], [20.9, 659.0], [21.0, 660.0], [21.1, 660.0], [21.2, 660.0], [21.3, 660.0], [21.4, 660.0], [21.5, 663.0], [21.6, 663.0], [21.7, 663.0], [21.8, 663.0], [21.9, 663.0], [22.0, 666.0], [22.1, 666.0], [22.2, 666.0], [22.3, 666.0], [22.4, 666.0], [22.5, 668.0], [22.6, 668.0], [22.7, 668.0], [22.8, 668.0], [22.9, 668.0], [23.0, 670.0], [23.1, 670.0], [23.2, 670.0], [23.3, 670.0], [23.4, 670.0], [23.5, 682.0], [23.6, 682.0], [23.7, 682.0], [23.8, 682.0], [23.9, 682.0], [24.0, 683.0], [24.1, 683.0], [24.2, 683.0], [24.3, 683.0], [24.4, 683.0], [24.5, 687.0], [24.6, 687.0], [24.7, 687.0], [24.8, 687.0], [24.9, 687.0], [25.0, 689.0], [25.1, 689.0], [25.2, 689.0], [25.3, 689.0], [25.4, 689.0], [25.5, 691.0], [25.6, 691.0], [25.7, 691.0], [25.8, 691.0], [25.9, 691.0], [26.0, 692.0], [26.1, 692.0], [26.2, 692.0], [26.3, 692.0], [26.4, 692.0], [26.5, 696.0], [26.6, 696.0], [26.7, 696.0], [26.8, 696.0], [26.9, 696.0], [27.0, 700.0], [27.1, 700.0], [27.2, 700.0], [27.3, 700.0], [27.4, 700.0], [27.5, 700.0], [27.6, 700.0], [27.7, 700.0], [27.8, 700.0], [27.9, 700.0], [28.0, 705.0], [28.1, 705.0], [28.2, 705.0], [28.3, 705.0], [28.4, 705.0], [28.5, 709.0], [28.6, 709.0], [28.7, 709.0], [28.8, 709.0], [28.9, 709.0], [29.0, 711.0], [29.1, 711.0], [29.2, 711.0], [29.3, 711.0], [29.4, 711.0], [29.5, 717.0], [29.6, 717.0], [29.7, 717.0], [29.8, 717.0], [29.9, 717.0], [30.0, 719.0], [30.1, 719.0], [30.2, 719.0], [30.3, 719.0], [30.4, 719.0], [30.5, 719.0], [30.6, 719.0], [30.7, 719.0], [30.8, 719.0], [30.9, 719.0], [31.0, 720.0], [31.1, 720.0], [31.2, 720.0], [31.3, 720.0], [31.4, 720.0], [31.5, 722.0], [31.6, 722.0], [31.7, 722.0], [31.8, 722.0], [31.9, 722.0], [32.0, 729.0], [32.1, 729.0], [32.2, 729.0], [32.3, 729.0], [32.4, 729.0], [32.5, 735.0], [32.6, 735.0], [32.7, 735.0], [32.8, 735.0], [32.9, 735.0], [33.0, 737.0], [33.1, 737.0], [33.2, 737.0], [33.3, 737.0], [33.4, 737.0], [33.5, 740.0], [33.6, 740.0], [33.7, 740.0], [33.8, 740.0], [33.9, 740.0], [34.0, 743.0], [34.1, 743.0], [34.2, 743.0], [34.3, 743.0], [34.4, 743.0], [34.5, 750.0], [34.6, 750.0], [34.7, 750.0], [34.8, 750.0], [34.9, 750.0], [35.0, 752.0], [35.1, 752.0], [35.2, 752.0], [35.3, 752.0], [35.4, 752.0], [35.5, 752.0], [35.6, 752.0], [35.7, 752.0], [35.8, 752.0], [35.9, 752.0], [36.0, 755.0], [36.1, 755.0], [36.2, 755.0], [36.3, 755.0], [36.4, 755.0], [36.5, 755.0], [36.6, 755.0], [36.7, 755.0], [36.8, 755.0], [36.9, 755.0], [37.0, 758.0], [37.1, 758.0], [37.2, 758.0], [37.3, 758.0], [37.4, 758.0], [37.5, 761.0], [37.6, 761.0], [37.7, 761.0], [37.8, 761.0], [37.9, 761.0], [38.0, 761.0], [38.1, 761.0], [38.2, 761.0], [38.3, 761.0], [38.4, 761.0], [38.5, 763.0], [38.6, 763.0], [38.7, 763.0], [38.8, 763.0], [38.9, 763.0], [39.0, 765.0], [39.1, 765.0], [39.2, 765.0], [39.3, 765.0], [39.4, 765.0], [39.5, 767.0], [39.6, 767.0], [39.7, 767.0], [39.8, 767.0], [39.9, 767.0], [40.0, 779.0], [40.1, 779.0], [40.2, 779.0], [40.3, 779.0], [40.4, 779.0], [40.5, 781.0], [40.6, 781.0], [40.7, 781.0], [40.8, 781.0], [40.9, 781.0], [41.0, 784.0], [41.1, 784.0], [41.2, 784.0], [41.3, 784.0], [41.4, 784.0], [41.5, 788.0], [41.6, 788.0], [41.7, 788.0], [41.8, 788.0], [41.9, 788.0], [42.0, 790.0], [42.1, 790.0], [42.2, 790.0], [42.3, 790.0], [42.4, 790.0], [42.5, 799.0], [42.6, 799.0], [42.7, 799.0], [42.8, 799.0], [42.9, 799.0], [43.0, 800.0], [43.1, 800.0], [43.2, 800.0], [43.3, 800.0], [43.4, 800.0], [43.5, 810.0], [43.6, 810.0], [43.7, 810.0], [43.8, 810.0], [43.9, 810.0], [44.0, 818.0], [44.1, 818.0], [44.2, 818.0], [44.3, 818.0], [44.4, 818.0], [44.5, 820.0], [44.6, 820.0], [44.7, 820.0], [44.8, 820.0], [44.9, 820.0], [45.0, 820.0], [45.1, 820.0], [45.2, 820.0], [45.3, 820.0], [45.4, 820.0], [45.5, 820.0], [45.6, 820.0], [45.7, 820.0], [45.8, 820.0], [45.9, 820.0], [46.0, 820.0], [46.1, 820.0], [46.2, 820.0], [46.3, 820.0], [46.4, 820.0], [46.5, 820.0], [46.6, 820.0], [46.7, 820.0], [46.8, 820.0], [46.9, 820.0], [47.0, 823.0], [47.1, 823.0], [47.2, 823.0], [47.3, 823.0], [47.4, 823.0], [47.5, 829.0], [47.6, 829.0], [47.7, 829.0], [47.8, 829.0], [47.9, 829.0], [48.0, 834.0], [48.1, 834.0], [48.2, 834.0], [48.3, 834.0], [48.4, 834.0], [48.5, 837.0], [48.6, 837.0], [48.7, 837.0], [48.8, 837.0], [48.9, 837.0], [49.0, 837.0], [49.1, 837.0], [49.2, 837.0], [49.3, 837.0], [49.4, 837.0], [49.5, 840.0], [49.6, 840.0], [49.7, 840.0], [49.8, 840.0], [49.9, 840.0], [50.0, 841.0], [50.1, 841.0], [50.2, 841.0], [50.3, 841.0], [50.4, 841.0], [50.5, 846.0], [50.6, 846.0], [50.7, 846.0], [50.8, 846.0], [50.9, 846.0], [51.0, 847.0], [51.1, 847.0], [51.2, 847.0], [51.3, 847.0], [51.4, 847.0], [51.5, 868.0], [51.6, 868.0], [51.7, 868.0], [51.8, 868.0], [51.9, 868.0], [52.0, 869.0], [52.1, 869.0], [52.2, 869.0], [52.3, 869.0], [52.4, 869.0], [52.5, 870.0], [52.6, 870.0], [52.7, 870.0], [52.8, 870.0], [52.9, 870.0], [53.0, 871.0], [53.1, 871.0], [53.2, 871.0], [53.3, 871.0], [53.4, 871.0], [53.5, 873.0], [53.6, 873.0], [53.7, 873.0], [53.8, 873.0], [53.9, 873.0], [54.0, 875.0], [54.1, 875.0], [54.2, 875.0], [54.3, 875.0], [54.4, 875.0], [54.5, 884.0], [54.6, 884.0], [54.7, 884.0], [54.8, 884.0], [54.9, 884.0], [55.0, 886.0], [55.1, 886.0], [55.2, 886.0], [55.3, 886.0], [55.4, 886.0], [55.5, 895.0], [55.6, 895.0], [55.7, 895.0], [55.8, 895.0], [55.9, 895.0], [56.0, 905.0], [56.1, 905.0], [56.2, 905.0], [56.3, 905.0], [56.4, 905.0], [56.5, 913.0], [56.6, 913.0], [56.7, 913.0], [56.8, 913.0], [56.9, 913.0], [57.0, 917.0], [57.1, 917.0], [57.2, 917.0], [57.3, 917.0], [57.4, 917.0], [57.5, 920.0], [57.6, 920.0], [57.7, 920.0], [57.8, 920.0], [57.9, 920.0], [58.0, 921.0], [58.1, 921.0], [58.2, 921.0], [58.3, 921.0], [58.4, 921.0], [58.5, 925.0], [58.6, 925.0], [58.7, 925.0], [58.8, 925.0], [58.9, 925.0], [59.0, 927.0], [59.1, 927.0], [59.2, 927.0], [59.3, 927.0], [59.4, 927.0], [59.5, 928.0], [59.6, 928.0], [59.7, 928.0], [59.8, 928.0], [59.9, 928.0], [60.0, 929.0], [60.1, 929.0], [60.2, 929.0], [60.3, 929.0], [60.4, 929.0], [60.5, 942.0], [60.6, 942.0], [60.7, 942.0], [60.8, 942.0], [60.9, 942.0], [61.0, 949.0], [61.1, 949.0], [61.2, 949.0], [61.3, 949.0], [61.4, 949.0], [61.5, 951.0], [61.6, 951.0], [61.7, 951.0], [61.8, 951.0], [61.9, 951.0], [62.0, 956.0], [62.1, 956.0], [62.2, 956.0], [62.3, 956.0], [62.4, 956.0], [62.5, 964.0], [62.6, 964.0], [62.7, 964.0], [62.8, 964.0], [62.9, 964.0], [63.0, 965.0], [63.1, 965.0], [63.2, 965.0], [63.3, 965.0], [63.4, 965.0], [63.5, 976.0], [63.6, 976.0], [63.7, 976.0], [63.8, 976.0], [63.9, 976.0], [64.0, 1001.0], [64.1, 1001.0], [64.2, 1001.0], [64.3, 1001.0], [64.4, 1001.0], [64.5, 1028.0], [64.6, 1028.0], [64.7, 1028.0], [64.8, 1028.0], [64.9, 1028.0], [65.0, 1029.0], [65.1, 1029.0], [65.2, 1029.0], [65.3, 1029.0], [65.4, 1029.0], [65.5, 1029.0], [65.6, 1029.0], [65.7, 1029.0], [65.8, 1029.0], [65.9, 1029.0], [66.0, 1041.0], [66.1, 1041.0], [66.2, 1041.0], [66.3, 1041.0], [66.4, 1041.0], [66.5, 1047.0], [66.6, 1047.0], [66.7, 1047.0], [66.8, 1047.0], [66.9, 1047.0], [67.0, 1057.0], [67.1, 1057.0], [67.2, 1057.0], [67.3, 1057.0], [67.4, 1057.0], [67.5, 1088.0], [67.6, 1088.0], [67.7, 1088.0], [67.8, 1088.0], [67.9, 1088.0], [68.0, 1090.0], [68.1, 1090.0], [68.2, 1090.0], [68.3, 1090.0], [68.4, 1090.0], [68.5, 1095.0], [68.6, 1095.0], [68.7, 1095.0], [68.8, 1095.0], [68.9, 1095.0], [69.0, 1113.0], [69.1, 1113.0], [69.2, 1113.0], [69.3, 1113.0], [69.4, 1113.0], [69.5, 1120.0], [69.6, 1120.0], [69.7, 1120.0], [69.8, 1120.0], [69.9, 1120.0], [70.0, 1129.0], [70.1, 1129.0], [70.2, 1129.0], [70.3, 1129.0], [70.4, 1129.0], [70.5, 1148.0], [70.6, 1148.0], [70.7, 1148.0], [70.8, 1148.0], [70.9, 1148.0], [71.0, 1172.0], [71.1, 1172.0], [71.2, 1172.0], [71.3, 1172.0], [71.4, 1172.0], [71.5, 1174.0], [71.6, 1174.0], [71.7, 1174.0], [71.8, 1174.0], [71.9, 1174.0], [72.0, 1180.0], [72.1, 1180.0], [72.2, 1180.0], [72.3, 1180.0], [72.4, 1180.0], [72.5, 1214.0], [72.6, 1214.0], [72.7, 1214.0], [72.8, 1214.0], [72.9, 1214.0], [73.0, 1227.0], [73.1, 1227.0], [73.2, 1227.0], [73.3, 1227.0], [73.4, 1227.0], [73.5, 1229.0], [73.6, 1229.0], [73.7, 1229.0], [73.8, 1229.0], [73.9, 1229.0], [74.0, 1238.0], [74.1, 1238.0], [74.2, 1238.0], [74.3, 1238.0], [74.4, 1238.0], [74.5, 1249.0], [74.6, 1249.0], [74.7, 1249.0], [74.8, 1249.0], [74.9, 1249.0], [75.0, 1250.0], [75.1, 1250.0], [75.2, 1250.0], [75.3, 1250.0], [75.4, 1250.0], [75.5, 1262.0], [75.6, 1262.0], [75.7, 1262.0], [75.8, 1262.0], [75.9, 1262.0], [76.0, 1283.0], [76.1, 1283.0], [76.2, 1283.0], [76.3, 1283.0], [76.4, 1283.0], [76.5, 1318.0], [76.6, 1318.0], [76.7, 1318.0], [76.8, 1318.0], [76.9, 1318.0], [77.0, 1328.0], [77.1, 1328.0], [77.2, 1328.0], [77.3, 1328.0], [77.4, 1328.0], [77.5, 1370.0], [77.6, 1370.0], [77.7, 1370.0], [77.8, 1370.0], [77.9, 1370.0], [78.0, 1373.0], [78.1, 1373.0], [78.2, 1373.0], [78.3, 1373.0], [78.4, 1373.0], [78.5, 1401.0], [78.6, 1401.0], [78.7, 1401.0], [78.8, 1401.0], [78.9, 1401.0], [79.0, 1420.0], [79.1, 1420.0], [79.2, 1420.0], [79.3, 1420.0], [79.4, 1420.0], [79.5, 1442.0], [79.6, 1442.0], [79.7, 1442.0], [79.8, 1442.0], [79.9, 1442.0], [80.0, 1450.0], [80.1, 1450.0], [80.2, 1450.0], [80.3, 1450.0], [80.4, 1450.0], [80.5, 1580.0], [80.6, 1580.0], [80.7, 1580.0], [80.8, 1580.0], [80.9, 1580.0], [81.0, 1619.0], [81.1, 1619.0], [81.2, 1619.0], [81.3, 1619.0], [81.4, 1619.0], [81.5, 1699.0], [81.6, 1699.0], [81.7, 1699.0], [81.8, 1699.0], [81.9, 1699.0], [82.0, 1806.0], [82.1, 1806.0], [82.2, 1806.0], [82.3, 1806.0], [82.4, 1806.0], [82.5, 1827.0], [82.6, 1827.0], [82.7, 1827.0], [82.8, 1827.0], [82.9, 1827.0], [83.0, 1941.0], [83.1, 1941.0], [83.2, 1941.0], [83.3, 1941.0], [83.4, 1941.0], [83.5, 1989.0], [83.6, 1989.0], [83.7, 1989.0], [83.8, 1989.0], [83.9, 1989.0], [84.0, 2251.0], [84.1, 2251.0], [84.2, 2251.0], [84.3, 2251.0], [84.4, 2251.0], [84.5, 2311.0], [84.6, 2311.0], [84.7, 2311.0], [84.8, 2311.0], [84.9, 2311.0], [85.0, 2320.0], [85.1, 2320.0], [85.2, 2320.0], [85.3, 2320.0], [85.4, 2320.0], [85.5, 2330.0], [85.6, 2330.0], [85.7, 2330.0], [85.8, 2330.0], [85.9, 2330.0], [86.0, 2362.0], [86.1, 2362.0], [86.2, 2362.0], [86.3, 2362.0], [86.4, 2362.0], [86.5, 2388.0], [86.6, 2388.0], [86.7, 2388.0], [86.8, 2388.0], [86.9, 2388.0], [87.0, 2403.0], [87.1, 2403.0], [87.2, 2403.0], [87.3, 2403.0], [87.4, 2403.0], [87.5, 2518.0], [87.6, 2518.0], [87.7, 2518.0], [87.8, 2518.0], [87.9, 2518.0], [88.0, 2720.0], [88.1, 2720.0], [88.2, 2720.0], [88.3, 2720.0], [88.4, 2720.0], [88.5, 2751.0], [88.6, 2751.0], [88.7, 2751.0], [88.8, 2751.0], [88.9, 2751.0], [89.0, 2819.0], [89.1, 2819.0], [89.2, 2819.0], [89.3, 2819.0], [89.4, 2819.0], [89.5, 2898.0], [89.6, 2898.0], [89.7, 2898.0], [89.8, 2898.0], [89.9, 2898.0], [90.0, 2970.0], [90.1, 2970.0], [90.2, 2970.0], [90.3, 2970.0], [90.4, 2970.0], [90.5, 3190.0], [90.6, 3190.0], [90.7, 3190.0], [90.8, 3190.0], [90.9, 3190.0], [91.0, 3259.0], [91.1, 3259.0], [91.2, 3259.0], [91.3, 3259.0], [91.4, 3259.0], [91.5, 3260.0], [91.6, 3260.0], [91.7, 3260.0], [91.8, 3260.0], [91.9, 3260.0], [92.0, 3342.0], [92.1, 3342.0], [92.2, 3342.0], [92.3, 3342.0], [92.4, 3342.0], [92.5, 3414.0], [92.6, 3414.0], [92.7, 3414.0], [92.8, 3414.0], [92.9, 3414.0], [93.0, 3494.0], [93.1, 3494.0], [93.2, 3494.0], [93.3, 3494.0], [93.4, 3494.0], [93.5, 3559.0], [93.6, 3559.0], [93.7, 3559.0], [93.8, 3559.0], [93.9, 3559.0], [94.0, 3630.0], [94.1, 3630.0], [94.2, 3630.0], [94.3, 3630.0], [94.4, 3630.0], [94.5, 3929.0], [94.6, 3929.0], [94.7, 3929.0], [94.8, 3929.0], [94.9, 3929.0], [95.0, 3994.0], [95.1, 3994.0], [95.2, 3994.0], [95.3, 3994.0], [95.4, 3994.0], [95.5, 4187.0], [95.6, 4187.0], [95.7, 4187.0], [95.8, 4187.0], [95.9, 4187.0], [96.0, 4199.0], [96.1, 4199.0], [96.2, 4199.0], [96.3, 4199.0], [96.4, 4199.0], [96.5, 4543.0], [96.6, 4543.0], [96.7, 4543.0], [96.8, 4543.0], [96.9, 4543.0], [97.0, 4640.0], [97.1, 4640.0], [97.2, 4640.0], [97.3, 4640.0], [97.4, 4640.0], [97.5, 4942.0], [97.6, 4942.0], [97.7, 4942.0], [97.8, 4942.0], [97.9, 4942.0], [98.0, 4950.0], [98.1, 4950.0], [98.2, 4950.0], [98.3, 4950.0], [98.4, 4950.0], [98.5, 5581.0], [98.6, 5581.0], [98.7, 5581.0], [98.8, 5581.0], [98.9, 5581.0], [99.0, 6739.0], [99.1, 6739.0], [99.2, 6739.0], [99.3, 6739.0], [99.4, 6739.0], [99.5, 6740.0], [99.6, 6740.0], [99.7, 6740.0], [99.8, 6740.0], [99.9, 6740.0]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[0.0, 140.0], [0.1, 140.0], [0.2, 140.0], [0.3, 140.0], [0.4, 140.0], [0.5, 140.0], [0.6, 140.0], [0.7, 140.0], [0.8, 140.0], [0.9, 140.0], [1.0, 159.0], [1.1, 159.0], [1.2, 159.0], [1.3, 159.0], [1.4, 159.0], [1.5, 195.0], [1.6, 195.0], [1.7, 195.0], [1.8, 195.0], [1.9, 195.0], [2.0, 197.0], [2.1, 197.0], [2.2, 197.0], [2.3, 197.0], [2.4, 197.0], [2.5, 235.0], [2.6, 235.0], [2.7, 235.0], [2.8, 235.0], [2.9, 235.0], [3.0, 247.0], [3.1, 247.0], [3.2, 247.0], [3.3, 247.0], [3.4, 247.0], [3.5, 310.0], [3.6, 310.0], [3.7, 310.0], [3.8, 310.0], [3.9, 310.0], [4.0, 314.0], [4.1, 314.0], [4.2, 314.0], [4.3, 314.0], [4.4, 314.0], [4.5, 320.0], [4.6, 320.0], [4.7, 320.0], [4.8, 320.0], [4.9, 320.0], [5.0, 321.0], [5.1, 321.0], [5.2, 321.0], [5.3, 321.0], [5.4, 321.0], [5.5, 328.0], [5.6, 328.0], [5.7, 328.0], [5.8, 328.0], [5.9, 328.0], [6.0, 329.0], [6.1, 329.0], [6.2, 329.0], [6.3, 329.0], [6.4, 329.0], [6.5, 340.0], [6.6, 340.0], [6.7, 340.0], [6.8, 340.0], [6.9, 340.0], [7.0, 349.0], [7.1, 349.0], [7.2, 349.0], [7.3, 349.0], [7.4, 349.0], [7.5, 357.0], [7.6, 357.0], [7.7, 357.0], [7.8, 357.0], [7.9, 357.0], [8.0, 371.0], [8.1, 371.0], [8.2, 371.0], [8.3, 371.0], [8.4, 371.0], [8.5, 372.0], [8.6, 372.0], [8.7, 372.0], [8.8, 372.0], [8.9, 372.0], [9.0, 380.0], [9.1, 380.0], [9.2, 380.0], [9.3, 380.0], [9.4, 380.0], [9.5, 381.0], [9.6, 381.0], [9.7, 381.0], [9.8, 381.0], [9.9, 381.0], [10.0, 384.0], [10.1, 384.0], [10.2, 384.0], [10.3, 384.0], [10.4, 384.0], [10.5, 399.0], [10.6, 399.0], [10.7, 399.0], [10.8, 399.0], [10.9, 399.0], [11.0, 401.0], [11.1, 401.0], [11.2, 401.0], [11.3, 401.0], [11.4, 401.0], [11.5, 405.0], [11.6, 405.0], [11.7, 405.0], [11.8, 405.0], [11.9, 405.0], [12.0, 410.0], [12.1, 410.0], [12.2, 410.0], [12.3, 410.0], [12.4, 410.0], [12.5, 414.0], [12.6, 414.0], [12.7, 414.0], [12.8, 414.0], [12.9, 414.0], [13.0, 415.0], [13.1, 415.0], [13.2, 415.0], [13.3, 415.0], [13.4, 415.0], [13.5, 421.0], [13.6, 421.0], [13.7, 421.0], [13.8, 421.0], [13.9, 421.0], [14.0, 439.0], [14.1, 439.0], [14.2, 439.0], [14.3, 439.0], [14.4, 439.0], [14.5, 440.0], [14.6, 440.0], [14.7, 440.0], [14.8, 440.0], [14.9, 440.0], [15.0, 449.0], [15.1, 449.0], [15.2, 449.0], [15.3, 449.0], [15.4, 449.0], [15.5, 458.0], [15.6, 458.0], [15.7, 458.0], [15.8, 458.0], [15.9, 458.0], [16.0, 458.0], [16.1, 458.0], [16.2, 458.0], [16.3, 458.0], [16.4, 458.0], [16.5, 459.0], [16.6, 459.0], [16.7, 459.0], [16.8, 459.0], [16.9, 459.0], [17.0, 460.0], [17.1, 460.0], [17.2, 460.0], [17.3, 460.0], [17.4, 460.0], [17.5, 461.0], [17.6, 461.0], [17.7, 461.0], [17.8, 461.0], [17.9, 461.0], [18.0, 464.0], [18.1, 464.0], [18.2, 464.0], [18.3, 464.0], [18.4, 464.0], [18.5, 470.0], [18.6, 470.0], [18.7, 470.0], [18.8, 470.0], [18.9, 470.0], [19.0, 470.0], [19.1, 470.0], [19.2, 470.0], [19.3, 470.0], [19.4, 470.0], [19.5, 481.0], [19.6, 481.0], [19.7, 481.0], [19.8, 481.0], [19.9, 481.0], [20.0, 486.0], [20.1, 486.0], [20.2, 486.0], [20.3, 486.0], [20.4, 486.0], [20.5, 488.0], [20.6, 488.0], [20.7, 488.0], [20.8, 488.0], [20.9, 488.0], [21.0, 490.0], [21.1, 490.0], [21.2, 490.0], [21.3, 490.0], [21.4, 490.0], [21.5, 490.0], [21.6, 490.0], [21.7, 490.0], [21.8, 490.0], [21.9, 490.0], [22.0, 490.0], [22.1, 490.0], [22.2, 490.0], [22.3, 490.0], [22.4, 490.0], [22.5, 491.0], [22.6, 491.0], [22.7, 491.0], [22.8, 491.0], [22.9, 491.0], [23.0, 498.0], [23.1, 498.0], [23.2, 498.0], [23.3, 498.0], [23.4, 498.0], [23.5, 500.0], [23.6, 500.0], [23.7, 500.0], [23.8, 500.0], [23.9, 500.0], [24.0, 503.0], [24.1, 503.0], [24.2, 503.0], [24.3, 503.0], [24.4, 503.0], [24.5, 504.0], [24.6, 504.0], [24.7, 504.0], [24.8, 504.0], [24.9, 504.0], [25.0, 510.0], [25.1, 510.0], [25.2, 510.0], [25.3, 510.0], [25.4, 510.0], [25.5, 511.0], [25.6, 511.0], [25.7, 511.0], [25.8, 511.0], [25.9, 511.0], [26.0, 512.0], [26.1, 512.0], [26.2, 512.0], [26.3, 512.0], [26.4, 512.0], [26.5, 516.0], [26.6, 516.0], [26.7, 516.0], [26.8, 516.0], [26.9, 516.0], [27.0, 531.0], [27.1, 531.0], [27.2, 531.0], [27.3, 531.0], [27.4, 531.0], [27.5, 533.0], [27.6, 533.0], [27.7, 533.0], [27.8, 533.0], [27.9, 533.0], [28.0, 536.0], [28.1, 536.0], [28.2, 536.0], [28.3, 536.0], [28.4, 536.0], [28.5, 547.0], [28.6, 547.0], [28.7, 547.0], [28.8, 547.0], [28.9, 547.0], [29.0, 549.0], [29.1, 549.0], [29.2, 549.0], [29.3, 549.0], [29.4, 549.0], [29.5, 550.0], [29.6, 550.0], [29.7, 550.0], [29.8, 550.0], [29.9, 550.0], [30.0, 560.0], [30.1, 560.0], [30.2, 560.0], [30.3, 560.0], [30.4, 560.0], [30.5, 561.0], [30.6, 561.0], [30.7, 561.0], [30.8, 561.0], [30.9, 561.0], [31.0, 561.0], [31.1, 561.0], [31.2, 561.0], [31.3, 561.0], [31.4, 561.0], [31.5, 563.0], [31.6, 563.0], [31.7, 563.0], [31.8, 563.0], [31.9, 563.0], [32.0, 567.0], [32.1, 567.0], [32.2, 567.0], [32.3, 567.0], [32.4, 567.0], [32.5, 571.0], [32.6, 571.0], [32.7, 571.0], [32.8, 571.0], [32.9, 571.0], [33.0, 581.0], [33.1, 581.0], [33.2, 581.0], [33.3, 581.0], [33.4, 581.0], [33.5, 588.0], [33.6, 588.0], [33.7, 588.0], [33.8, 588.0], [33.9, 588.0], [34.0, 590.0], [34.1, 590.0], [34.2, 590.0], [34.3, 590.0], [34.4, 590.0], [34.5, 591.0], [34.6, 591.0], [34.7, 591.0], [34.8, 591.0], [34.9, 591.0], [35.0, 593.0], [35.1, 593.0], [35.2, 593.0], [35.3, 593.0], [35.4, 593.0], [35.5, 595.0], [35.6, 595.0], [35.7, 595.0], [35.8, 595.0], [35.9, 595.0], [36.0, 599.0], [36.1, 599.0], [36.2, 599.0], [36.3, 599.0], [36.4, 599.0], [36.5, 599.0], [36.6, 599.0], [36.7, 599.0], [36.8, 599.0], [36.9, 599.0], [37.0, 600.0], [37.1, 600.0], [37.2, 600.0], [37.3, 600.0], [37.4, 600.0], [37.5, 603.0], [37.6, 603.0], [37.7, 603.0], [37.8, 603.0], [37.9, 603.0], [38.0, 603.0], [38.1, 603.0], [38.2, 603.0], [38.3, 603.0], [38.4, 603.0], [38.5, 603.0], [38.6, 603.0], [38.7, 603.0], [38.8, 603.0], [38.9, 603.0], [39.0, 609.0], [39.1, 609.0], [39.2, 609.0], [39.3, 609.0], [39.4, 609.0], [39.5, 610.0], [39.6, 610.0], [39.7, 610.0], [39.8, 610.0], [39.9, 610.0], [40.0, 610.0], [40.1, 610.0], [40.2, 610.0], [40.3, 610.0], [40.4, 610.0], [40.5, 610.0], [40.6, 610.0], [40.7, 610.0], [40.8, 610.0], [40.9, 610.0], [41.0, 618.0], [41.1, 618.0], [41.2, 618.0], [41.3, 618.0], [41.4, 618.0], [41.5, 619.0], [41.6, 619.0], [41.7, 619.0], [41.8, 619.0], [41.9, 619.0], [42.0, 621.0], [42.1, 621.0], [42.2, 621.0], [42.3, 621.0], [42.4, 621.0], [42.5, 624.0], [42.6, 624.0], [42.7, 624.0], [42.8, 624.0], [42.9, 624.0], [43.0, 626.0], [43.1, 626.0], [43.2, 626.0], [43.3, 626.0], [43.4, 626.0], [43.5, 628.0], [43.6, 628.0], [43.7, 628.0], [43.8, 628.0], [43.9, 628.0], [44.0, 628.0], [44.1, 628.0], [44.2, 628.0], [44.3, 628.0], [44.4, 628.0], [44.5, 629.0], [44.6, 629.0], [44.7, 629.0], [44.8, 629.0], [44.9, 629.0], [45.0, 631.0], [45.1, 631.0], [45.2, 631.0], [45.3, 631.0], [45.4, 631.0], [45.5, 634.0], [45.6, 634.0], [45.7, 634.0], [45.8, 634.0], [45.9, 634.0], [46.0, 635.0], [46.1, 635.0], [46.2, 635.0], [46.3, 635.0], [46.4, 635.0], [46.5, 644.0], [46.6, 644.0], [46.7, 644.0], [46.8, 644.0], [46.9, 644.0], [47.0, 650.0], [47.1, 650.0], [47.2, 650.0], [47.3, 650.0], [47.4, 650.0], [47.5, 650.0], [47.6, 650.0], [47.7, 650.0], [47.8, 650.0], [47.9, 650.0], [48.0, 650.0], [48.1, 650.0], [48.2, 650.0], [48.3, 650.0], [48.4, 650.0], [48.5, 652.0], [48.6, 652.0], [48.7, 652.0], [48.8, 652.0], [48.9, 652.0], [49.0, 659.0], [49.1, 659.0], [49.2, 659.0], [49.3, 659.0], [49.4, 659.0], [49.5, 662.0], [49.6, 662.0], [49.7, 662.0], [49.8, 662.0], [49.9, 662.0], [50.0, 666.0], [50.1, 666.0], [50.2, 666.0], [50.3, 666.0], [50.4, 666.0], [50.5, 670.0], [50.6, 670.0], [50.7, 670.0], [50.8, 670.0], [50.9, 670.0], [51.0, 680.0], [51.1, 680.0], [51.2, 680.0], [51.3, 680.0], [51.4, 680.0], [51.5, 681.0], [51.6, 681.0], [51.7, 681.0], [51.8, 681.0], [51.9, 681.0], [52.0, 681.0], [52.1, 681.0], [52.2, 681.0], [52.3, 681.0], [52.4, 681.0], [52.5, 687.0], [52.6, 687.0], [52.7, 687.0], [52.8, 687.0], [52.9, 687.0], [53.0, 689.0], [53.1, 689.0], [53.2, 689.0], [53.3, 689.0], [53.4, 689.0], [53.5, 689.0], [53.6, 689.0], [53.7, 689.0], [53.8, 689.0], [53.9, 689.0], [54.0, 690.0], [54.1, 690.0], [54.2, 690.0], [54.3, 690.0], [54.4, 690.0], [54.5, 691.0], [54.6, 691.0], [54.7, 691.0], [54.8, 691.0], [54.9, 691.0], [55.0, 694.0], [55.1, 694.0], [55.2, 694.0], [55.3, 694.0], [55.4, 694.0], [55.5, 695.0], [55.6, 695.0], [55.7, 695.0], [55.8, 695.0], [55.9, 695.0], [56.0, 698.0], [56.1, 698.0], [56.2, 698.0], [56.3, 698.0], [56.4, 698.0], [56.5, 699.0], [56.6, 699.0], [56.7, 699.0], [56.8, 699.0], [56.9, 699.0], [57.0, 700.0], [57.1, 700.0], [57.2, 700.0], [57.3, 700.0], [57.4, 700.0], [57.5, 701.0], [57.6, 701.0], [57.7, 701.0], [57.8, 701.0], [57.9, 701.0], [58.0, 703.0], [58.1, 703.0], [58.2, 703.0], [58.3, 703.0], [58.4, 703.0], [58.5, 709.0], [58.6, 709.0], [58.7, 709.0], [58.8, 709.0], [58.9, 709.0], [59.0, 710.0], [59.1, 710.0], [59.2, 710.0], [59.3, 710.0], [59.4, 710.0], [59.5, 716.0], [59.6, 716.0], [59.7, 716.0], [59.8, 716.0], [59.9, 716.0], [60.0, 720.0], [60.1, 720.0], [60.2, 720.0], [60.3, 720.0], [60.4, 720.0], [60.5, 720.0], [60.6, 720.0], [60.7, 720.0], [60.8, 720.0], [60.9, 720.0], [61.0, 720.0], [61.1, 720.0], [61.2, 720.0], [61.3, 720.0], [61.4, 720.0], [61.5, 721.0], [61.6, 721.0], [61.7, 721.0], [61.8, 721.0], [61.9, 721.0], [62.0, 724.0], [62.1, 724.0], [62.2, 724.0], [62.3, 724.0], [62.4, 724.0], [62.5, 728.0], [62.6, 728.0], [62.7, 728.0], [62.8, 728.0], [62.9, 728.0], [63.0, 730.0], [63.1, 730.0], [63.2, 730.0], [63.3, 730.0], [63.4, 730.0], [63.5, 731.0], [63.6, 731.0], [63.7, 731.0], [63.8, 731.0], [63.9, 731.0], [64.0, 739.0], [64.1, 739.0], [64.2, 739.0], [64.3, 739.0], [64.4, 739.0], [64.5, 739.0], [64.6, 739.0], [64.7, 739.0], [64.8, 739.0], [64.9, 739.0], [65.0, 739.0], [65.1, 739.0], [65.2, 739.0], [65.3, 739.0], [65.4, 739.0], [65.5, 750.0], [65.6, 750.0], [65.7, 750.0], [65.8, 750.0], [65.9, 750.0], [66.0, 751.0], [66.1, 751.0], [66.2, 751.0], [66.3, 751.0], [66.4, 751.0], [66.5, 752.0], [66.6, 752.0], [66.7, 752.0], [66.8, 752.0], [66.9, 752.0], [67.0, 762.0], [67.1, 762.0], [67.2, 762.0], [67.3, 762.0], [67.4, 762.0], [67.5, 769.0], [67.6, 769.0], [67.7, 769.0], [67.8, 769.0], [67.9, 769.0], [68.0, 769.0], [68.1, 769.0], [68.2, 769.0], [68.3, 769.0], [68.4, 769.0], [68.5, 770.0], [68.6, 770.0], [68.7, 770.0], [68.8, 770.0], [68.9, 770.0], [69.0, 772.0], [69.1, 772.0], [69.2, 772.0], [69.3, 772.0], [69.4, 772.0], [69.5, 772.0], [69.6, 772.0], [69.7, 772.0], [69.8, 772.0], [69.9, 772.0], [70.0, 780.0], [70.1, 780.0], [70.2, 780.0], [70.3, 780.0], [70.4, 780.0], [70.5, 787.0], [70.6, 787.0], [70.7, 787.0], [70.8, 787.0], [70.9, 787.0], [71.0, 788.0], [71.1, 788.0], [71.2, 788.0], [71.3, 788.0], [71.4, 788.0], [71.5, 791.0], [71.6, 791.0], [71.7, 791.0], [71.8, 791.0], [71.9, 791.0], [72.0, 800.0], [72.1, 800.0], [72.2, 800.0], [72.3, 800.0], [72.4, 800.0], [72.5, 811.0], [72.6, 811.0], [72.7, 811.0], [72.8, 811.0], [72.9, 811.0], [73.0, 820.0], [73.1, 820.0], [73.2, 820.0], [73.3, 820.0], [73.4, 820.0], [73.5, 830.0], [73.6, 830.0], [73.7, 830.0], [73.8, 830.0], [73.9, 830.0], [74.0, 830.0], [74.1, 830.0], [74.2, 830.0], [74.3, 830.0], [74.4, 830.0], [74.5, 837.0], [74.6, 837.0], [74.7, 837.0], [74.8, 837.0], [74.9, 837.0], [75.0, 839.0], [75.1, 839.0], [75.2, 839.0], [75.3, 839.0], [75.4, 839.0], [75.5, 843.0], [75.6, 843.0], [75.7, 843.0], [75.8, 843.0], [75.9, 843.0], [76.0, 847.0], [76.1, 847.0], [76.2, 847.0], [76.3, 847.0], [76.4, 847.0], [76.5, 856.0], [76.6, 856.0], [76.7, 856.0], [76.8, 856.0], [76.9, 856.0], [77.0, 859.0], [77.1, 859.0], [77.2, 859.0], [77.3, 859.0], [77.4, 859.0], [77.5, 860.0], [77.6, 860.0], [77.7, 860.0], [77.8, 860.0], [77.9, 860.0], [78.0, 869.0], [78.1, 869.0], [78.2, 869.0], [78.3, 869.0], [78.4, 869.0], [78.5, 872.0], [78.6, 872.0], [78.7, 872.0], [78.8, 872.0], [78.9, 872.0], [79.0, 872.0], [79.1, 872.0], [79.2, 872.0], [79.3, 872.0], [79.4, 872.0], [79.5, 888.0], [79.6, 888.0], [79.7, 888.0], [79.8, 888.0], [79.9, 888.0], [80.0, 890.0], [80.1, 890.0], [80.2, 890.0], [80.3, 890.0], [80.4, 890.0], [80.5, 893.0], [80.6, 893.0], [80.7, 893.0], [80.8, 893.0], [80.9, 893.0], [81.0, 918.0], [81.1, 918.0], [81.2, 918.0], [81.3, 918.0], [81.4, 918.0], [81.5, 929.0], [81.6, 929.0], [81.7, 929.0], [81.8, 929.0], [81.9, 929.0], [82.0, 937.0], [82.1, 937.0], [82.2, 937.0], [82.3, 937.0], [82.4, 937.0], [82.5, 938.0], [82.6, 938.0], [82.7, 938.0], [82.8, 938.0], [82.9, 938.0], [83.0, 958.0], [83.1, 958.0], [83.2, 958.0], [83.3, 958.0], [83.4, 958.0], [83.5, 970.0], [83.6, 970.0], [83.7, 970.0], [83.8, 970.0], [83.9, 970.0], [84.0, 975.0], [84.1, 975.0], [84.2, 975.0], [84.3, 975.0], [84.4, 975.0], [84.5, 1006.0], [84.6, 1006.0], [84.7, 1006.0], [84.8, 1006.0], [84.9, 1006.0], [85.0, 1010.0], [85.1, 1010.0], [85.2, 1010.0], [85.3, 1010.0], [85.4, 1010.0], [85.5, 1038.0], [85.6, 1038.0], [85.7, 1038.0], [85.8, 1038.0], [85.9, 1038.0], [86.0, 1070.0], [86.1, 1070.0], [86.2, 1070.0], [86.3, 1070.0], [86.4, 1070.0], [86.5, 1075.0], [86.6, 1075.0], [86.7, 1075.0], [86.8, 1075.0], [86.9, 1075.0], [87.0, 1160.0], [87.1, 1160.0], [87.2, 1160.0], [87.3, 1160.0], [87.4, 1160.0], [87.5, 1220.0], [87.6, 1220.0], [87.7, 1220.0], [87.8, 1220.0], [87.9, 1220.0], [88.0, 1280.0], [88.1, 1280.0], [88.2, 1280.0], [88.3, 1280.0], [88.4, 1280.0], [88.5, 1469.0], [88.6, 1469.0], [88.7, 1469.0], [88.8, 1469.0], [88.9, 1469.0], [89.0, 1525.0], [89.1, 1525.0], [89.2, 1525.0], [89.3, 1525.0], [89.4, 1525.0], [89.5, 1541.0], [89.6, 1541.0], [89.7, 1541.0], [89.8, 1541.0], [89.9, 1541.0], [90.0, 1543.0], [90.1, 1543.0], [90.2, 1543.0], [90.3, 1543.0], [90.4, 1543.0], [90.5, 1589.0], [90.6, 1589.0], [90.7, 1589.0], [90.8, 1589.0], [90.9, 1589.0], [91.0, 1681.0], [91.1, 1681.0], [91.2, 1681.0], [91.3, 1681.0], [91.4, 1681.0], [91.5, 1742.0], [91.6, 1742.0], [91.7, 1742.0], [91.8, 1742.0], [91.9, 1742.0], [92.0, 1769.0], [92.1, 1769.0], [92.2, 1769.0], [92.3, 1769.0], [92.4, 1769.0], [92.5, 1789.0], [92.6, 1789.0], [92.7, 1789.0], [92.8, 1789.0], [92.9, 1789.0], [93.0, 1850.0], [93.1, 1850.0], [93.2, 1850.0], [93.3, 1850.0], [93.4, 1850.0], [93.5, 1851.0], [93.6, 1851.0], [93.7, 1851.0], [93.8, 1851.0], [93.9, 1851.0], [94.0, 2051.0], [94.1, 2051.0], [94.2, 2051.0], [94.3, 2051.0], [94.4, 2051.0], [94.5, 2111.0], [94.6, 2111.0], [94.7, 2111.0], [94.8, 2111.0], [94.9, 2111.0], [95.0, 2168.0], [95.1, 2168.0], [95.2, 2168.0], [95.3, 2168.0], [95.4, 2168.0], [95.5, 2247.0], [95.6, 2247.0], [95.7, 2247.0], [95.8, 2247.0], [95.9, 2247.0], [96.0, 2270.0], [96.1, 2270.0], [96.2, 2270.0], [96.3, 2270.0], [96.4, 2270.0], [96.5, 3170.0], [96.6, 3170.0], [96.7, 3170.0], [96.8, 3170.0], [96.9, 3170.0], [97.0, 3297.0], [97.1, 3297.0], [97.2, 3297.0], [97.3, 3297.0], [97.4, 3297.0], [97.5, 3441.0], [97.6, 3441.0], [97.7, 3441.0], [97.8, 3441.0], [97.9, 3441.0], [98.0, 4042.0], [98.1, 4042.0], [98.2, 4042.0], [98.3, 4042.0], [98.4, 4042.0], [98.5, 4073.0], [98.6, 4073.0], [98.7, 4073.0], [98.8, 4073.0], [98.9, 4073.0], [99.0, 4550.0], [99.1, 4550.0], [99.2, 4550.0], [99.3, 4550.0], [99.4, 4550.0], [99.5, 5744.0], [99.6, 5744.0], [99.7, 5744.0], [99.8, 5744.0], [99.9, 5744.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 29.0], [0.1, 29.0], [0.2, 29.0], [0.3, 29.0], [0.4, 29.0], [0.5, 40.0], [0.6, 40.0], [0.7, 40.0], [0.8, 40.0], [0.9, 40.0], [1.0, 40.0], [1.1, 40.0], [1.2, 40.0], [1.3, 40.0], [1.4, 40.0], [1.5, 44.0], [1.6, 44.0], [1.7, 44.0], [1.8, 44.0], [1.9, 44.0], [2.0, 45.0], [2.1, 45.0], [2.2, 45.0], [2.3, 45.0], [2.4, 45.0], [2.5, 46.0], [2.6, 46.0], [2.7, 46.0], [2.8, 46.0], [2.9, 46.0], [3.0, 47.0], [3.1, 47.0], [3.2, 47.0], [3.3, 47.0], [3.4, 47.0], [3.5, 48.0], [3.6, 48.0], [3.7, 48.0], [3.8, 48.0], [3.9, 48.0], [4.0, 49.0], [4.1, 49.0], [4.2, 49.0], [4.3, 49.0], [4.4, 49.0], [4.5, 49.0], [4.6, 49.0], [4.7, 49.0], [4.8, 49.0], [4.9, 49.0], [5.0, 50.0], [5.1, 50.0], [5.2, 50.0], [5.3, 50.0], [5.4, 50.0], [5.5, 54.0], [5.6, 54.0], [5.7, 54.0], [5.8, 54.0], [5.9, 54.0], [6.0, 55.0], [6.1, 55.0], [6.2, 55.0], [6.3, 55.0], [6.4, 55.0], [6.5, 65.0], [6.6, 65.0], [6.7, 65.0], [6.8, 65.0], [6.9, 65.0], [7.0, 82.0], [7.1, 82.0], [7.2, 82.0], [7.3, 82.0], [7.4, 82.0], [7.5, 106.0], [7.6, 106.0], [7.7, 106.0], [7.8, 106.0], [7.9, 106.0], [8.0, 115.0], [8.1, 115.0], [8.2, 115.0], [8.3, 115.0], [8.4, 115.0], [8.5, 181.0], [8.6, 181.0], [8.7, 181.0], [8.8, 181.0], [8.9, 181.0], [9.0, 210.0], [9.1, 210.0], [9.2, 210.0], [9.3, 210.0], [9.4, 210.0], [9.5, 217.0], [9.6, 217.0], [9.7, 217.0], [9.8, 217.0], [9.9, 217.0], [10.0, 229.0], [10.1, 229.0], [10.2, 229.0], [10.3, 229.0], [10.4, 229.0], [10.5, 236.0], [10.6, 236.0], [10.7, 236.0], [10.8, 236.0], [10.9, 236.0], [11.0, 238.0], [11.1, 238.0], [11.2, 238.0], [11.3, 238.0], [11.4, 238.0], [11.5, 238.0], [11.6, 238.0], [11.7, 238.0], [11.8, 238.0], [11.9, 238.0], [12.0, 240.0], [12.1, 240.0], [12.2, 240.0], [12.3, 240.0], [12.4, 240.0], [12.5, 241.0], [12.6, 241.0], [12.7, 241.0], [12.8, 241.0], [12.9, 241.0], [13.0, 247.0], [13.1, 247.0], [13.2, 247.0], [13.3, 247.0], [13.4, 247.0], [13.5, 251.0], [13.6, 251.0], [13.7, 251.0], [13.8, 251.0], [13.9, 251.0], [14.0, 260.0], [14.1, 260.0], [14.2, 260.0], [14.3, 260.0], [14.4, 260.0], [14.5, 261.0], [14.6, 261.0], [14.7, 261.0], [14.8, 261.0], [14.9, 261.0], [15.0, 261.0], [15.1, 261.0], [15.2, 261.0], [15.3, 261.0], [15.4, 261.0], [15.5, 261.0], [15.6, 261.0], [15.7, 261.0], [15.8, 261.0], [15.9, 261.0], [16.0, 270.0], [16.1, 270.0], [16.2, 270.0], [16.3, 270.0], [16.4, 270.0], [16.5, 278.0], [16.6, 278.0], [16.7, 278.0], [16.8, 278.0], [16.9, 278.0], [17.0, 280.0], [17.1, 280.0], [17.2, 280.0], [17.3, 280.0], [17.4, 280.0], [17.5, 290.0], [17.6, 290.0], [17.7, 290.0], [17.8, 290.0], [17.9, 290.0], [18.0, 310.0], [18.1, 310.0], [18.2, 310.0], [18.3, 310.0], [18.4, 310.0], [18.5, 310.0], [18.6, 310.0], [18.7, 310.0], [18.8, 310.0], [18.9, 310.0], [19.0, 310.0], [19.1, 310.0], [19.2, 310.0], [19.3, 310.0], [19.4, 310.0], [19.5, 314.0], [19.6, 314.0], [19.7, 314.0], [19.8, 314.0], [19.9, 314.0], [20.0, 315.0], [20.1, 315.0], [20.2, 315.0], [20.3, 315.0], [20.4, 315.0], [20.5, 320.0], [20.6, 320.0], [20.7, 320.0], [20.8, 320.0], [20.9, 320.0], [21.0, 329.0], [21.1, 329.0], [21.2, 329.0], [21.3, 329.0], [21.4, 329.0], [21.5, 329.0], [21.6, 329.0], [21.7, 329.0], [21.8, 329.0], [21.9, 329.0], [22.0, 333.0], [22.1, 333.0], [22.2, 333.0], [22.3, 333.0], [22.4, 333.0], [22.5, 336.0], [22.6, 336.0], [22.7, 336.0], [22.8, 336.0], [22.9, 336.0], [23.0, 340.0], [23.1, 340.0], [23.2, 340.0], [23.3, 340.0], [23.4, 340.0], [23.5, 342.0], [23.6, 342.0], [23.7, 342.0], [23.8, 342.0], [23.9, 342.0], [24.0, 344.0], [24.1, 344.0], [24.2, 344.0], [24.3, 344.0], [24.4, 344.0], [24.5, 348.0], [24.6, 348.0], [24.7, 348.0], [24.8, 348.0], [24.9, 348.0], [25.0, 349.0], [25.1, 349.0], [25.2, 349.0], [25.3, 349.0], [25.4, 349.0], [25.5, 349.0], [25.6, 349.0], [25.7, 349.0], [25.8, 349.0], [25.9, 349.0], [26.0, 351.0], [26.1, 351.0], [26.2, 351.0], [26.3, 351.0], [26.4, 351.0], [26.5, 352.0], [26.6, 352.0], [26.7, 352.0], [26.8, 352.0], [26.9, 352.0], [27.0, 355.0], [27.1, 355.0], [27.2, 355.0], [27.3, 355.0], [27.4, 355.0], [27.5, 359.0], [27.6, 359.0], [27.7, 359.0], [27.8, 359.0], [27.9, 359.0], [28.0, 359.0], [28.1, 359.0], [28.2, 359.0], [28.3, 359.0], [28.4, 359.0], [28.5, 360.0], [28.6, 360.0], [28.7, 360.0], [28.8, 360.0], [28.9, 360.0], [29.0, 364.0], [29.1, 364.0], [29.2, 364.0], [29.3, 364.0], [29.4, 364.0], [29.5, 369.0], [29.6, 369.0], [29.7, 369.0], [29.8, 369.0], [29.9, 369.0], [30.0, 370.0], [30.1, 370.0], [30.2, 370.0], [30.3, 370.0], [30.4, 370.0], [30.5, 380.0], [30.6, 380.0], [30.7, 380.0], [30.8, 380.0], [30.9, 380.0], [31.0, 380.0], [31.1, 380.0], [31.2, 380.0], [31.3, 380.0], [31.4, 380.0], [31.5, 389.0], [31.6, 389.0], [31.7, 389.0], [31.8, 389.0], [31.9, 389.0], [32.0, 389.0], [32.1, 389.0], [32.2, 389.0], [32.3, 389.0], [32.4, 389.0], [32.5, 393.0], [32.6, 393.0], [32.7, 393.0], [32.8, 393.0], [32.9, 393.0], [33.0, 400.0], [33.1, 400.0], [33.2, 400.0], [33.3, 400.0], [33.4, 400.0], [33.5, 410.0], [33.6, 410.0], [33.7, 410.0], [33.8, 410.0], [33.9, 410.0], [34.0, 410.0], [34.1, 410.0], [34.2, 410.0], [34.3, 410.0], [34.4, 410.0], [34.5, 411.0], [34.6, 411.0], [34.7, 411.0], [34.8, 411.0], [34.9, 411.0], [35.0, 414.0], [35.1, 414.0], [35.2, 414.0], [35.3, 414.0], [35.4, 414.0], [35.5, 430.0], [35.6, 430.0], [35.7, 430.0], [35.8, 430.0], [35.9, 430.0], [36.0, 439.0], [36.1, 439.0], [36.2, 439.0], [36.3, 439.0], [36.4, 439.0], [36.5, 440.0], [36.6, 440.0], [36.7, 440.0], [36.8, 440.0], [36.9, 440.0], [37.0, 448.0], [37.1, 448.0], [37.2, 448.0], [37.3, 448.0], [37.4, 448.0], [37.5, 450.0], [37.6, 450.0], [37.7, 450.0], [37.8, 450.0], [37.9, 450.0], [38.0, 450.0], [38.1, 450.0], [38.2, 450.0], [38.3, 450.0], [38.4, 450.0], [38.5, 467.0], [38.6, 467.0], [38.7, 467.0], [38.8, 467.0], [38.9, 467.0], [39.0, 469.0], [39.1, 469.0], [39.2, 469.0], [39.3, 469.0], [39.4, 469.0], [39.5, 469.0], [39.6, 469.0], [39.7, 469.0], [39.8, 469.0], [39.9, 469.0], [40.0, 475.0], [40.1, 475.0], [40.2, 475.0], [40.3, 475.0], [40.4, 475.0], [40.5, 479.0], [40.6, 479.0], [40.7, 479.0], [40.8, 479.0], [40.9, 479.0], [41.0, 479.0], [41.1, 479.0], [41.2, 479.0], [41.3, 479.0], [41.4, 479.0], [41.5, 481.0], [41.6, 481.0], [41.7, 481.0], [41.8, 481.0], [41.9, 481.0], [42.0, 481.0], [42.1, 481.0], [42.2, 481.0], [42.3, 481.0], [42.4, 481.0], [42.5, 482.0], [42.6, 482.0], [42.7, 482.0], [42.8, 482.0], [42.9, 482.0], [43.0, 484.0], [43.1, 484.0], [43.2, 484.0], [43.3, 484.0], [43.4, 484.0], [43.5, 484.0], [43.6, 484.0], [43.7, 484.0], [43.8, 484.0], [43.9, 484.0], [44.0, 486.0], [44.1, 486.0], [44.2, 486.0], [44.3, 486.0], [44.4, 486.0], [44.5, 490.0], [44.6, 490.0], [44.7, 490.0], [44.8, 490.0], [44.9, 490.0], [45.0, 490.0], [45.1, 490.0], [45.2, 490.0], [45.3, 490.0], [45.4, 490.0], [45.5, 490.0], [45.6, 490.0], [45.7, 490.0], [45.8, 490.0], [45.9, 490.0], [46.0, 491.0], [46.1, 491.0], [46.2, 491.0], [46.3, 491.0], [46.4, 491.0], [46.5, 496.0], [46.6, 496.0], [46.7, 496.0], [46.8, 496.0], [46.9, 496.0], [47.0, 500.0], [47.1, 500.0], [47.2, 500.0], [47.3, 500.0], [47.4, 500.0], [47.5, 503.0], [47.6, 503.0], [47.7, 503.0], [47.8, 503.0], [47.9, 503.0], [48.0, 507.0], [48.1, 507.0], [48.2, 507.0], [48.3, 507.0], [48.4, 507.0], [48.5, 509.0], [48.6, 509.0], [48.7, 509.0], [48.8, 509.0], [48.9, 509.0], [49.0, 510.0], [49.1, 510.0], [49.2, 510.0], [49.3, 510.0], [49.4, 510.0], [49.5, 510.0], [49.6, 510.0], [49.7, 510.0], [49.8, 510.0], [49.9, 510.0], [50.0, 510.0], [50.1, 510.0], [50.2, 510.0], [50.3, 510.0], [50.4, 510.0], [50.5, 516.0], [50.6, 516.0], [50.7, 516.0], [50.8, 516.0], [50.9, 516.0], [51.0, 522.0], [51.1, 522.0], [51.2, 522.0], [51.3, 522.0], [51.4, 522.0], [51.5, 526.0], [51.6, 526.0], [51.7, 526.0], [51.8, 526.0], [51.9, 526.0], [52.0, 532.0], [52.1, 532.0], [52.2, 532.0], [52.3, 532.0], [52.4, 532.0], [52.5, 533.0], [52.6, 533.0], [52.7, 533.0], [52.8, 533.0], [52.9, 533.0], [53.0, 533.0], [53.1, 533.0], [53.2, 533.0], [53.3, 533.0], [53.4, 533.0], [53.5, 536.0], [53.6, 536.0], [53.7, 536.0], [53.8, 536.0], [53.9, 536.0], [54.0, 548.0], [54.1, 548.0], [54.2, 548.0], [54.3, 548.0], [54.4, 548.0], [54.5, 549.0], [54.6, 549.0], [54.7, 549.0], [54.8, 549.0], [54.9, 549.0], [55.0, 549.0], [55.1, 549.0], [55.2, 549.0], [55.3, 549.0], [55.4, 549.0], [55.5, 553.0], [55.6, 553.0], [55.7, 553.0], [55.8, 553.0], [55.9, 553.0], [56.0, 557.0], [56.1, 557.0], [56.2, 557.0], [56.3, 557.0], [56.4, 557.0], [56.5, 560.0], [56.6, 560.0], [56.7, 560.0], [56.8, 560.0], [56.9, 560.0], [57.0, 560.0], [57.1, 560.0], [57.2, 560.0], [57.3, 560.0], [57.4, 560.0], [57.5, 561.0], [57.6, 561.0], [57.7, 561.0], [57.8, 561.0], [57.9, 561.0], [58.0, 561.0], [58.1, 561.0], [58.2, 561.0], [58.3, 561.0], [58.4, 561.0], [58.5, 562.0], [58.6, 562.0], [58.7, 562.0], [58.8, 562.0], [58.9, 562.0], [59.0, 569.0], [59.1, 569.0], [59.2, 569.0], [59.3, 569.0], [59.4, 569.0], [59.5, 570.0], [59.6, 570.0], [59.7, 570.0], [59.8, 570.0], [59.9, 570.0], [60.0, 570.0], [60.1, 570.0], [60.2, 570.0], [60.3, 570.0], [60.4, 570.0], [60.5, 574.0], [60.6, 574.0], [60.7, 574.0], [60.8, 574.0], [60.9, 574.0], [61.0, 578.0], [61.1, 578.0], [61.2, 578.0], [61.3, 578.0], [61.4, 578.0], [61.5, 580.0], [61.6, 580.0], [61.7, 580.0], [61.8, 580.0], [61.9, 580.0], [62.0, 580.0], [62.1, 580.0], [62.2, 580.0], [62.3, 580.0], [62.4, 580.0], [62.5, 593.0], [62.6, 593.0], [62.7, 593.0], [62.8, 593.0], [62.9, 593.0], [63.0, 595.0], [63.1, 595.0], [63.2, 595.0], [63.3, 595.0], [63.4, 595.0], [63.5, 596.0], [63.6, 596.0], [63.7, 596.0], [63.8, 596.0], [63.9, 596.0], [64.0, 597.0], [64.1, 597.0], [64.2, 597.0], [64.3, 597.0], [64.4, 597.0], [64.5, 598.0], [64.6, 598.0], [64.7, 598.0], [64.8, 598.0], [64.9, 598.0], [65.0, 599.0], [65.1, 599.0], [65.2, 599.0], [65.3, 599.0], [65.4, 599.0], [65.5, 600.0], [65.6, 600.0], [65.7, 600.0], [65.8, 600.0], [65.9, 600.0], [66.0, 604.0], [66.1, 604.0], [66.2, 604.0], [66.3, 604.0], [66.4, 604.0], [66.5, 605.0], [66.6, 605.0], [66.7, 605.0], [66.8, 605.0], [66.9, 605.0], [67.0, 610.0], [67.1, 610.0], [67.2, 610.0], [67.3, 610.0], [67.4, 610.0], [67.5, 619.0], [67.6, 619.0], [67.7, 619.0], [67.8, 619.0], [67.9, 619.0], [68.0, 620.0], [68.1, 620.0], [68.2, 620.0], [68.3, 620.0], [68.4, 620.0], [68.5, 621.0], [68.6, 621.0], [68.7, 621.0], [68.8, 621.0], [68.9, 621.0], [69.0, 625.0], [69.1, 625.0], [69.2, 625.0], [69.3, 625.0], [69.4, 625.0], [69.5, 630.0], [69.6, 630.0], [69.7, 630.0], [69.8, 630.0], [69.9, 630.0], [70.0, 631.0], [70.1, 631.0], [70.2, 631.0], [70.3, 631.0], [70.4, 631.0], [70.5, 631.0], [70.6, 631.0], [70.7, 631.0], [70.8, 631.0], [70.9, 631.0], [71.0, 653.0], [71.1, 653.0], [71.2, 653.0], [71.3, 653.0], [71.4, 653.0], [71.5, 660.0], [71.6, 660.0], [71.7, 660.0], [71.8, 660.0], [71.9, 660.0], [72.0, 661.0], [72.1, 661.0], [72.2, 661.0], [72.3, 661.0], [72.4, 661.0], [72.5, 667.0], [72.6, 667.0], [72.7, 667.0], [72.8, 667.0], [72.9, 667.0], [73.0, 673.0], [73.1, 673.0], [73.2, 673.0], [73.3, 673.0], [73.4, 673.0], [73.5, 686.0], [73.6, 686.0], [73.7, 686.0], [73.8, 686.0], [73.9, 686.0], [74.0, 689.0], [74.1, 689.0], [74.2, 689.0], [74.3, 689.0], [74.4, 689.0], [74.5, 689.0], [74.6, 689.0], [74.7, 689.0], [74.8, 689.0], [74.9, 689.0], [75.0, 690.0], [75.1, 690.0], [75.2, 690.0], [75.3, 690.0], [75.4, 690.0], [75.5, 700.0], [75.6, 700.0], [75.7, 700.0], [75.8, 700.0], [75.9, 700.0], [76.0, 701.0], [76.1, 701.0], [76.2, 701.0], [76.3, 701.0], [76.4, 701.0], [76.5, 708.0], [76.6, 708.0], [76.7, 708.0], [76.8, 708.0], [76.9, 708.0], [77.0, 709.0], [77.1, 709.0], [77.2, 709.0], [77.3, 709.0], [77.4, 709.0], [77.5, 717.0], [77.6, 717.0], [77.7, 717.0], [77.8, 717.0], [77.9, 717.0], [78.0, 719.0], [78.1, 719.0], [78.2, 719.0], [78.3, 719.0], [78.4, 719.0], [78.5, 724.0], [78.6, 724.0], [78.7, 724.0], [78.8, 724.0], [78.9, 724.0], [79.0, 738.0], [79.1, 738.0], [79.2, 738.0], [79.3, 738.0], [79.4, 738.0], [79.5, 740.0], [79.6, 740.0], [79.7, 740.0], [79.8, 740.0], [79.9, 740.0], [80.0, 749.0], [80.1, 749.0], [80.2, 749.0], [80.3, 749.0], [80.4, 749.0], [80.5, 749.0], [80.6, 749.0], [80.7, 749.0], [80.8, 749.0], [80.9, 749.0], [81.0, 751.0], [81.1, 751.0], [81.2, 751.0], [81.3, 751.0], [81.4, 751.0], [81.5, 753.0], [81.6, 753.0], [81.7, 753.0], [81.8, 753.0], [81.9, 753.0], [82.0, 755.0], [82.1, 755.0], [82.2, 755.0], [82.3, 755.0], [82.4, 755.0], [82.5, 756.0], [82.6, 756.0], [82.7, 756.0], [82.8, 756.0], [82.9, 756.0], [83.0, 758.0], [83.1, 758.0], [83.2, 758.0], [83.3, 758.0], [83.4, 758.0], [83.5, 760.0], [83.6, 760.0], [83.7, 760.0], [83.8, 760.0], [83.9, 760.0], [84.0, 762.0], [84.1, 762.0], [84.2, 762.0], [84.3, 762.0], [84.4, 762.0], [84.5, 774.0], [84.6, 774.0], [84.7, 774.0], [84.8, 774.0], [84.9, 774.0], [85.0, 777.0], [85.1, 777.0], [85.2, 777.0], [85.3, 777.0], [85.4, 777.0], [85.5, 780.0], [85.6, 780.0], [85.7, 780.0], [85.8, 780.0], [85.9, 780.0], [86.0, 780.0], [86.1, 780.0], [86.2, 780.0], [86.3, 780.0], [86.4, 780.0], [86.5, 781.0], [86.6, 781.0], [86.7, 781.0], [86.8, 781.0], [86.9, 781.0], [87.0, 783.0], [87.1, 783.0], [87.2, 783.0], [87.3, 783.0], [87.4, 783.0], [87.5, 790.0], [87.6, 790.0], [87.7, 790.0], [87.8, 790.0], [87.9, 790.0], [88.0, 791.0], [88.1, 791.0], [88.2, 791.0], [88.3, 791.0], [88.4, 791.0], [88.5, 795.0], [88.6, 795.0], [88.7, 795.0], [88.8, 795.0], [88.9, 795.0], [89.0, 846.0], [89.1, 846.0], [89.2, 846.0], [89.3, 846.0], [89.4, 846.0], [89.5, 854.0], [89.6, 854.0], [89.7, 854.0], [89.8, 854.0], [89.9, 854.0], [90.0, 889.0], [90.1, 889.0], [90.2, 889.0], [90.3, 889.0], [90.4, 889.0], [90.5, 951.0], [90.6, 951.0], [90.7, 951.0], [90.8, 951.0], [90.9, 951.0], [91.0, 960.0], [91.1, 960.0], [91.2, 960.0], [91.3, 960.0], [91.4, 960.0], [91.5, 975.0], [91.6, 975.0], [91.7, 975.0], [91.8, 975.0], [91.9, 975.0], [92.0, 975.0], [92.1, 975.0], [92.2, 975.0], [92.3, 975.0], [92.4, 975.0], [92.5, 979.0], [92.6, 979.0], [92.7, 979.0], [92.8, 979.0], [92.9, 979.0], [93.0, 992.0], [93.1, 992.0], [93.2, 992.0], [93.3, 992.0], [93.4, 992.0], [93.5, 1270.0], [93.6, 1270.0], [93.7, 1270.0], [93.8, 1270.0], [93.9, 1270.0], [94.0, 1273.0], [94.1, 1273.0], [94.2, 1273.0], [94.3, 1273.0], [94.4, 1273.0], [94.5, 1379.0], [94.6, 1379.0], [94.7, 1379.0], [94.8, 1379.0], [94.9, 1379.0], [95.0, 1430.0], [95.1, 1430.0], [95.2, 1430.0], [95.3, 1430.0], [95.4, 1430.0], [95.5, 1435.0], [95.6, 1435.0], [95.7, 1435.0], [95.8, 1435.0], [95.9, 1435.0], [96.0, 1600.0], [96.1, 1600.0], [96.2, 1600.0], [96.3, 1600.0], [96.4, 1600.0], [96.5, 1606.0], [96.6, 1606.0], [96.7, 1606.0], [96.8, 1606.0], [96.9, 1606.0], [97.0, 1650.0], [97.1, 1650.0], [97.2, 1650.0], [97.3, 1650.0], [97.4, 1650.0], [97.5, 1657.0], [97.6, 1657.0], [97.7, 1657.0], [97.8, 1657.0], [97.9, 1657.0], [98.0, 1740.0], [98.1, 1740.0], [98.2, 1740.0], [98.3, 1740.0], [98.4, 1740.0], [98.5, 1986.0], [98.6, 1986.0], [98.7, 1986.0], [98.8, 1986.0], [98.9, 1986.0], [99.0, 2049.0], [99.1, 2049.0], [99.2, 2049.0], [99.3, 2049.0], [99.4, 2049.0], [99.5, 2219.0], [99.6, 2219.0], [99.7, 2219.0], [99.8, 2219.0], [99.9, 2219.0]], "isOverall": false, "label": "Buy product ID", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 40.0, "series": [{"data": [[600.0, 24.0], [700.0, 32.0], [800.0, 26.0], [900.0, 16.0], [1000.0, 10.0], [1100.0, 7.0], [1200.0, 8.0], [1300.0, 4.0], [1400.0, 4.0], [1500.0, 1.0], [1600.0, 2.0], [100.0, 2.0], [1800.0, 2.0], [1900.0, 2.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2700.0, 2.0], [2800.0, 2.0], [2900.0, 1.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 1.0], [200.0, 5.0], [3400.0, 2.0], [3500.0, 1.0], [3600.0, 1.0], [3900.0, 2.0], [4100.0, 2.0], [4500.0, 1.0], [4600.0, 1.0], [300.0, 1.0], [4900.0, 2.0], [5500.0, 1.0], [400.0, 7.0], [6700.0, 2.0], [500.0, 15.0]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[600.0, 40.0], [700.0, 30.0], [800.0, 18.0], [900.0, 7.0], [1000.0, 5.0], [1100.0, 1.0], [1200.0, 2.0], [1400.0, 1.0], [1500.0, 4.0], [100.0, 5.0], [1600.0, 1.0], [1700.0, 3.0], [1800.0, 2.0], [2000.0, 1.0], [2100.0, 2.0], [2200.0, 2.0], [3100.0, 1.0], [200.0, 2.0], [3200.0, 1.0], [3400.0, 1.0], [4000.0, 2.0], [4500.0, 1.0], [300.0, 15.0], [5700.0, 1.0], [400.0, 25.0], [500.0, 27.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 15.0], [2200.0, 1.0], [600.0, 20.0], [700.0, 27.0], [200.0, 18.0], [800.0, 3.0], [900.0, 6.0], [300.0, 30.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 2.0], [400.0, 28.0], [1600.0, 4.0], [100.0, 3.0], [1700.0, 1.0], [1900.0, 1.0], [500.0, 37.0], [2000.0, 1.0]], "isOverall": false, "label": "Buy product ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 69.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 373.0, "series": [{"data": [[0.0, 158.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 373.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 69.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.953333333333337, "minX": 1.6959723E12, "maxY": 17.953333333333337, "series": [{"data": [[1.6959723E12, 17.953333333333337]], "isOverall": false, "label": "Buyer Product", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6959723E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 43.666666666666664, "minX": 1.0, "maxY": 1663.25, "series": [{"data": [[8.0, 1227.0], [2.0, 218.33333333333334], [10.0, 1348.8], [12.0, 580.5], [13.0, 524.0], [14.0, 1129.0], [16.0, 641.1666666666667], [1.0, 1278.5], [17.0, 1350.3076923076922], [18.0, 1283.0], [19.0, 1351.0], [20.0, 1342.4062500000002], [5.0, 510.0], [7.0, 1663.25]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[17.909999999999997, 1281.9899999999996]], "isOverall": false, "label": "Buy product-Aggregated", "isController": false}, {"data": [[8.0, 314.0], [2.0, 614.0], [10.0, 1116.4], [11.0, 384.0], [12.0, 445.5], [14.0, 1112.8], [4.0, 195.0], [16.0, 635.0], [1.0, 349.0], [17.0, 1087.7692307692307], [18.0, 776.6], [19.0, 904.2592592592592], [20.0, 826.7656250000001], [7.0, 789.1666666666666]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[18.15999999999999, 846.9550000000003]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[8.0, 214.5], [2.0, 43.666666666666664], [10.0, 257.875], [12.0, 60.0], [3.0, 278.0], [13.0, 55.0], [14.0, 1187.75], [16.0, 275.2], [1.0, 140.5], [17.0, 733.7692307692307], [18.0, 552.6666666666666], [19.0, 674.2692307692307], [20.0, 595.1138211382113], [5.0, 44.5], [6.0, 106.0], [7.0, 205.0]], "isOverall": false, "label": "Buy product ID", "isController": false}, {"data": [[17.790000000000003, 561.4050000000002]], "isOverall": false, "label": "Buy product ID-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2280.0, "minX": 1.6959723E12, "maxY": 8996.666666666666, "series": [{"data": [[1.6959723E12, 8996.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6959723E12, 2280.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6959723E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 561.4050000000002, "minX": 1.6959723E12, "maxY": 1281.9899999999996, "series": [{"data": [[1.6959723E12, 1281.9899999999996]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[1.6959723E12, 846.9550000000003]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.6959723E12, 561.4050000000002]], "isOverall": false, "label": "Buy product ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6959723E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 561.3950000000002, "minX": 1.6959723E12, "maxY": 1281.9699999999998, "series": [{"data": [[1.6959723E12, 1281.9699999999998]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[1.6959723E12, 846.7799999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.6959723E12, 561.3950000000002]], "isOverall": false, "label": "Buy product ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6959723E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6959723E12, "maxY": 373.94000000000017, "series": [{"data": [[1.6959723E12, 373.94000000000017]], "isOverall": false, "label": "Buy product", "isController": false}, {"data": [[1.6959723E12, 46.82500000000003]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.6959723E12, 0.0]], "isOverall": false, "label": "Buy product ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6959723E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.6959723E12, "maxY": 6740.0, "series": [{"data": [[1.6959723E12, 6740.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6959723E12, 29.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6959723E12, 1656.2999999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6959723E12, 4938.980000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6959723E12, 682.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6959723E12, 2749.449999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6959723E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 159.0, "minX": 1.0, "maxY": 1194.0, "series": [{"data": [[11.0, 321.0], [12.0, 614.5], [3.0, 169.0], [15.0, 676.0], [1.0, 195.0], [16.0, 1194.0], [4.0, 224.0], [17.0, 516.0], [18.0, 700.5], [19.0, 440.0], [20.0, 575.0], [21.0, 713.5], [22.0, 671.0], [23.0, 585.5], [24.0, 738.5], [26.0, 660.0], [27.0, 730.0], [7.0, 159.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 159.0, "minX": 1.0, "maxY": 1194.0, "series": [{"data": [[11.0, 321.0], [12.0, 614.0], [3.0, 169.0], [15.0, 676.0], [1.0, 194.0], [16.0, 1194.0], [4.0, 224.0], [17.0, 516.0], [18.0, 700.5], [19.0, 440.0], [20.0, 574.5], [21.0, 713.5], [22.0, 671.0], [23.0, 585.5], [24.0, 738.0], [26.0, 660.0], [27.0, 730.0], [7.0, 159.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6959723E12, "maxY": 10.0, "series": [{"data": [[1.6959723E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6959723E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6959723E12, "maxY": 6.666666666666667, "series": [{"data": [[1.6959723E12, 6.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6959723E12, 3.3333333333333335]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6959723E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6959723E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.6959723E12, 3.3333333333333335]], "isOverall": false, "label": "Buy product-success", "isController": false}, {"data": [[1.6959723E12, 3.3333333333333335]], "isOverall": false, "label": "Buy product ID-success", "isController": false}, {"data": [[1.6959723E12, 3.3333333333333335]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6959723E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6959723E12, "maxY": 10.0, "series": [{"data": [[1.6959723E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6959723E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

